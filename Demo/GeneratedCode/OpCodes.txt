using System;
using System.Collections.Immutable;
namespace OpCodeGenerated
{
    public static class OpCodes
    {
        public static readonly OpCode noOp = new OpCode("No Operator", "No operation is performed by this opCode", OpCodeCategory.Other, new ImmutableArray<Parameter> { });
	public static readonly OpCode add = new OpCode("Add", "This operation performs *Destination* = *Source 1* + *Source 2*", OpCodeCategory.Math, new ImmutableArray<Parameter> { new Parameter("Destination", ParamType.Register), new Parameter("Source 1", ParamType.Register), new Parameter("Source 2", ParamType.Register), });
	public static readonly OpCode sub = new OpCode("Subtract", "This operation performs *Destination* = *Source 1* - *Source 2*", OpCodeCategory.Math, new ImmutableArray<Parameter> { new Parameter("Destination", ParamType.Register), new Parameter("Source 1", ParamType.Register), new Parameter("Source 2", ParamType.Register), });
	public static readonly OpCode mult = new OpCode("Multiply", "This operation performs *Destination* = *Source 1* * *Source 2*", OpCodeCategory.Math, new ImmutableArray<Parameter> { new Parameter("Destination", ParamType.Register), new Parameter("Source 1", ParamType.Register), new Parameter("Source 2", ParamType.Register), });
	public static readonly OpCode div = new OpCode("Divide", "This operation performs *Destination* = *Source 1* / *Source 2*", OpCodeCategory.Math, new ImmutableArray<Parameter> { new Parameter("Destination", ParamType.Register), new Parameter("Source 1", ParamType.Register), new Parameter("Source 2", ParamType.Register), });
	public static readonly OpCode mod = new OpCode("Mod", "This operation performs *Destination* = *Source 1* % *Source 2*", OpCodeCategory.Math, new ImmutableArray<Parameter> { new Parameter("Destination", ParamType.Register), new Parameter("Source 1", ParamType.Register), new Parameter("Source 2", ParamType.Register), });
	public static readonly OpCode rSft = new OpCode("Shift Right", "This operation performs *Source* = *Source* >> *Amount*", OpCodeCategory.Math, new ImmutableArray<Parameter> { new Parameter("Source", ParamType.Register), new Parameter("Amount", ParamType.Short), });
	public static readonly OpCode lSft = new OpCode("Shift Left", "This operation performs *Source* = *Source* << *Amount*", OpCodeCategory.Math, new ImmutableArray<Parameter> { new Parameter("Source", ParamType.Register), new Parameter("Amount", ParamType.Short), });
	public static readonly OpCode not = new OpCode("Not Operator", "This operation performs *Source* = ~*Source*", OpCodeCategory.Logic, new ImmutableArray<Parameter> { new Parameter("Source", ParamType.Register), });
	public static readonly OpCode and = new OpCode("And Operator", "This operation performs *Destination* = *Source 1* & *Source 2*", OpCodeCategory.Logic, new ImmutableArray<Parameter> { new Parameter("Destination", ParamType.Register), new Parameter("Source 1", ParamType.Register), new Parameter("Source 2", ParamType.Register), });
	public static readonly OpCode or = new OpCode("Or Operator", "This operation performs *Destination* = *Source 1* | *Source 2*", OpCodeCategory.Logic, new ImmutableArray<Parameter> { new Parameter("Destination", ParamType.Register), new Parameter("Source 1", ParamType.Register), new Parameter("Source 2", ParamType.Register), });
	public static readonly OpCode xor = new OpCode("Exclusive Or Operator", "This operation performs *Destination* = *Source 1* ^ *Source 2*", OpCodeCategory.Logic, new ImmutableArray<Parameter> { new Parameter("Destination", ParamType.Register), new Parameter("Source 1", ParamType.Register), new Parameter("Source 2", ParamType.Register), });
	public static readonly OpCode eql = new OpCode("Check Equality", "This operation performs *Destination* = *Source 1* == *Source 2*", OpCodeCategory.Logic, new ImmutableArray<Parameter> { new Parameter("Destination", ParamType.Register), new Parameter("Source 1", ParamType.Register), new Parameter("Source 2", ParamType.Register), });
	public static readonly OpCode grtr = new OpCode("Check Greater Than", "This operation performs *Destination* = *Source 1* > *Source 2*", OpCodeCategory.Logic, new ImmutableArray<Parameter> { new Parameter("Destination", ParamType.Register), new Parameter("Source 1", ParamType.Register), new Parameter("Source 2", ParamType.Register), });
	public static readonly OpCode less = new OpCode("Check Less Than", "This operation performs *Destination* = *Source 1* < *Source 2*", OpCodeCategory.Logic, new ImmutableArray<Parameter> { new Parameter("Destination", ParamType.Register), new Parameter("Source 1", ParamType.Register), new Parameter("Source 2", ParamType.Register), });
	public static readonly OpCode nEql = new OpCode("Check InEquality", "This operation performs *Destination* = *Source 1* != *Source 2*", OpCodeCategory.Logic, new ImmutableArray<Parameter> { new Parameter("Destination", ParamType.Register), new Parameter("Source 1", ParamType.Register), new Parameter("Source 2", ParamType.Register), });
	public static readonly OpCode grtE = new OpCode("Check Greater Than or Equal", "This operation performs *Destination* = *Source 1* >= *Source 2*", OpCodeCategory.Logic, new ImmutableArray<Parameter> { new Parameter("Destination", ParamType.Register), new Parameter("Source 1", ParamType.Register), new Parameter("Source 2", ParamType.Register), });
	public static readonly OpCode lssE = new OpCode("Check Less Than or Equal", "This operation performs *Destination* = *Source 1* <= *Source 2*", OpCodeCategory.Logic, new ImmutableArray<Parameter> { new Parameter("Destination", ParamType.Register), new Parameter("Source 1", ParamType.Register), new Parameter("Source 2", ParamType.Register), });
	public static readonly OpCode tp = new OpCode("Teleport", "This operation performs jumps to the address *Address*", OpCodeCategory.Flow, new ImmutableArray<Parameter> { new Parameter("Address", ParamType.Short), });
	public static readonly OpCode tpZ = new OpCode("Teleport if Zero", "This operation performs jumps to the address *Address* if *Source* == 0", OpCodeCategory.Flow, new ImmutableArray<Parameter> { new Parameter("Source", ParamType.Register), new Parameter("Address", ParamType.Short), });
	public static readonly OpCode tpNZ = new OpCode("Teleport if not Zero", "This operation performs jumps to the address *Address* if *Source* != 0", OpCodeCategory.Flow, new ImmutableArray<Parameter> { new Parameter("Source", ParamType.Register), new Parameter("Address", ParamType.Short), });
	public static readonly OpCode load = new OpCode("Load", "This operation loads value at *Address* into *Destination*", OpCodeCategory.Memory, new ImmutableArray<Parameter> { new Parameter("Destination", ParamType.Register), new Parameter("Address", ParamType.Short), });
	public static readonly OpCode unld = new OpCode("Unload", "This operation unloads value from *Source* into *Address*", OpCodeCategory.Memory, new ImmutableArray<Parameter> { new Parameter("Source", ParamType.Register), new Parameter("Address", ParamType.Short), });
	public static readonly OpCode push = new OpCode("Push", "This operation pushes *Source* to the stack", OpCodeCategory.Memory, new ImmutableArray<Parameter> { new Parameter("Source", ParamType.Register), });
	public static readonly OpCode pop = new OpCode("Pop", "This operation pops from the stack into *Destination", OpCodeCategory.Memory, new ImmutableArray<Parameter> { new Parameter("Destination", ParamType.Register), });
	public static readonly OpCode peek = new OpCode("Peek", "This operation loads from the stack offset by *Offset* into *Destination*", OpCodeCategory.Memory, new ImmutableArray<Parameter> { new Parameter("Destination", ParamType.Register), new Parameter("Offset", ParamType.Short), });
	public static readonly OpCode set = new OpCode("Set", "This operation sets the register *Destination* to *Value*", OpCodeCategory.Memory, new ImmutableArray<Parameter> { new Parameter("Destination", ParamType.Register), new Parameter("Value", ParamType.Short), });
	public static readonly OpCode stPr = new OpCode("Set in Program space", "This operation sets the register *Destination* to the *Label*'s address relative to Program Space", OpCodeCategory.Memory, new ImmutableArray<Parameter> { new Parameter("Destination", ParamType.Register), new Parameter("Label", ParamType.Short), });
	public static readonly OpCode mov = new OpCode("Move", "This operation copies *Source* to *Destination*", OpCodeCategory.Memory, new ImmutableArray<Parameter> { new Parameter("Destination", ParamType.Register), new Parameter("Source", ParamType.Register), });
	public static readonly OpCode call = new OpCode("Call", "This operation calls a function at address *Address*", OpCodeCategory.Flow, new ImmutableArray<Parameter> { new Parameter("Address", ParamType.Short), });
	public static readonly OpCode ret = new OpCode("Return", "This operation returns from a function", OpCodeCategory.Flow, new ImmutableArray<Parameter> { });
	public static readonly OpCode ldI = new OpCode("Load Indrect", "This operation loads value at address *Source* into *Destination*", OpCodeCategory.Memory, new ImmutableArray<Parameter> { new Parameter("Destination", ParamType.Register), new Parameter("Source", ParamType.Register), });
	public static readonly OpCode uldI = new OpCode("Unload Indrect", "This operation unloads *Source* into value at address *Destination*", OpCodeCategory.Memory, new ImmutableArray<Parameter> { new Parameter("Destination", ParamType.Register), new Parameter("Source", ParamType.Register), });
	} }